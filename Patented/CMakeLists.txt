SOURCE_FILES ( Patented_SRCS
vtkDecimate.cxx
vtkDividingCubes.cxx
vtkGridSynchronizedTemplates3D.cxx
vtkImageMarchingCubes.cxx
vtkKitwareContourFilter.cxx
vtkMarchingContourFilter.cxx
vtkMarchingCubes.cxx
vtkMarchingSquares.cxx
vtkSliceCubes.cxx
vtkSweptSurface.cxx
vtkSynchronizedTemplates2D.cxx
vtkSynchronizedTemplates3D.cxx
)

IF(CMAKE_BUILD_TOOL MATCHES devenv)
  SET_SOURCE_FILES_PROPERTIES(vtkSweptSurface COMPILE_FLAGS /Op)
ENDIF(CMAKE_BUILD_TOOL MATCHES devenv)

IF(VTK_MAKE_INSTANTIATOR)
  # Setup vtkInstantiator registration for this library's classes.
  VTK_MAKE_INSTANTIATOR(vtkPatentedInstantiator PatentedInstantiator_SRCS
                        Patented_SRCS
                        EXPORT_MACRO VTK_PATENTED_EXPORT
                        HEADER_LOCATION ${VTK_BINARY_DIR})
  ADD_LIBRARY(vtkPatented Patented_SRCS PatentedInstantiator_SRCS)
  INSTALL_FILES(/include/vtk .h ${VTK_BINARY_DIR}/vtkPatentedInstantiator)
ELSE(VTK_MAKE_INSTANTIATOR)
  ADD_LIBRARY(vtkPatented Patented_SRCS)
ENDIF(VTK_MAKE_INSTANTIATOR)

# Allow the user to customize their build with some local options
#
INCLUDE (${VTK_BINARY_DIR}/Patented/LocalUserOptions.cmake OPTIONAL)
INCLUDE (${VTK_SOURCE_DIR}/Patented/LocalUserOptions.cmake OPTIONAL)

IF (VTK_WRAP_TCL)
  VTK_WRAP_TCL(vtkPatentedTCL PatentedTCL_SRCS Patented_SRCS)
  IF (APPLE)
    ADD_LIBRARY(vtkPatentedTCL SHARED PatentedTCL_SRCS)
  ELSE (APPLE)
    ADD_LIBRARY(vtkPatentedTCL PatentedTCL_SRCS)
  ENDIF (APPLE)
  TARGET_LINK_LIBRARIES (vtkPatentedTCL vtkIOTCL
                         vtkGraphicsTCL vtkImagingTCL vtkFilteringTCL
                         vtkCommonTCL
                         ${TCL_LIBRARY})
  INSTALL_TARGETS(/lib/vtk vtkPatentedTCL)
ENDIF (VTK_WRAP_TCL)

# if we are wrapping into Python then add the library and extra
# source files
#
IF (VTK_WRAP_PYTHON)
  VTK_WRAP_PYTHON(vtkPatentedPython PatentedPython_SRCS Patented_SRCS)
  IF (APPLE)
    ADD_LIBRARY(vtkPatentedPython MODULE PatentedPython_SRCS)
  ELSE (APPLE)
    ADD_LIBRARY(vtkPatentedPython SHARED PatentedPython_SRCS)
    TARGET_LINK_LIBRARIES (vtkPatentedPython
                           vtkGraphicsPython
                           vtkImagingPython
                           vtkFilteringPython
                           vtkCommonPython)
  ENDIF (APPLE)
  IF(WIN32)
    TARGET_LINK_LIBRARIES (vtkPatentedPython
                           debug ${PYTHON_DEBUG_LIBRARY}
                           optimized ${PYTHON_LIBRARY})
  ELSE(WIN32)
    TARGET_LINK_LIBRARIES (vtkPatentedPython ${PYTHON_LIBRARY})
  ENDIF(WIN32)

  INSTALL_TARGETS(/lib/vtk vtkPatentedPython)
ENDIF (VTK_WRAP_PYTHON)

# if we are wrapping into Java then add the library and extra
# source files
#
IF (VTK_WRAP_JAVA)
  VTK_WRAP_JAVA(vtkPatentedJava PatentedJava_SRCS Patented_SRCS)
  ADD_LIBRARY(vtkPatentedJava SHARED PatentedJava_SRCS)
  TARGET_LINK_LIBRARIES (vtkPatentedJava vtkCommonJava vtkFilteringJava
                         vtkImagingJava vtkGraphicsJava)
  INSTALL_TARGETS(/lib/vtk vtkPatentedJava)
ENDIF (VTK_WRAP_JAVA)

LINK_LIBRARIES (
vtkCommon
vtkFiltering
vtkImaging
vtkGraphics
vtkIO
vtkPatented
)


INSTALL_TARGETS(/lib/vtk vtkPatented)
INSTALL_FILES(/include/vtk .h Patented_SRCS)
