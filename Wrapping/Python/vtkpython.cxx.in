/*=========================================================================

  Program:   Visualization Toolkit
  Module:    $RCSfile$
  Language:  C++
  Date:      $Date$
  Version:   $Revision$


Copyright (c) 1993-2001 Ken Martin, Will Schroeder, Bill Lorensen  
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither name of Ken Martin, Will Schroeder, or Bill Lorensen nor the names
   of any contributors may be used to endorse or promote products derived
   from this software without specific prior written permission.

 * Modified source versions must be plainly marked as such, and must not be
   misrepresented as being the original software.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS''
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=========================================================================*/

/* Minimal main program -- everything is loaded from the library */

#include "vtkVersion.h"

#include "Python.h"

extern "C" {
  extern DL_EXPORT(int) Py_Main(int, char **);
}

int
main(int argc, char **argv)
{
  int displayVersion = 0;
  if ( argc > 1 )
    {
    int cc;
    for ( cc = 1; cc < argc; cc ++ )
      {
      if ( strcmp(argv[cc], "-V") == 0 )
	{
        displayVersion = 1;
	break;
	}
      }
    }
  else
    {
    displayVersion = 1;
    }
  if ( displayVersion )
    {
    cout << vtkVersion::GetVTKSourceVersion() << endl;
    }

  // The following code will hack in the path for running VTK/Python
  // from the build tree. Do not try this at home. We are
  // professionals.

  // Set the program name, so that we can ask python to provide us
  // full path.
  Py_SetProgramName(argv[0]);

  // Initialize interpreter.
  Py_Initialize();

  // Get the full path of the executable and strip the executable name
  // so that we are left with full location of the executable.
  const char* cpath = Py_GetProgramFullPath();
  char* rpath = new char[ strlen(cpath) +1 ];
  char epath[] = "@VTK_EXECUTABLE_PATH@";
  unsigned int last = 0;
  unsigned int cc;
  for ( cc = 0; cc < strlen(cpath); cc ++ )
    {
    if ( cpath[cc] == '/' || cpath[cc] == '\\' )
      {
      last = cc;
      rpath[cc] = '/';
      }
    else
      {
      rpath[cc] = cpath[cc];
      }
    }
  rpath[last] = 0;

#ifdef _WIN32
  // On Windows we might have to fix the case of letter. This will not
  // fix all the cases, but in most cases it will work. There might
  // still be a problem with network paths.
  if ( rpath[0] >= 'a' && rpath[0] <= 'z' && rpath[1] == ':' )
    {
    rpath[0] += 'A' - 'a';
    }
  if ( epath[0] >= 'a' && epath[0] <= 'z' && epath[1] == ':' )
    {
    epath[0] += 'A' - 'a';
    }
#endif

  unsigned int l1 = strlen(rpath);
  unsigned int l2 = strlen(epath);
  if ( l1 > l2 && strncmp(rpath, epath, l2) == 0 )
    {
    // If the location of the executable is the same as executable
    // output path, then we are running from the build tree.

    // Get the pointer to path list object, append both paths, and
    // make sure to decrease reference counting for both path strings.
    PyObject* path = PySys_GetObject("path");
    PyObject* newpath;
    newpath = PyString_FromString("@VTK_LIBRARY_PATH@");
    PyList_Insert(path, 0, newpath);
    Py_DECREF(newpath);
    newpath = PyString_FromString("@VTK_SOURCE_DIR@/Wrapping/Python");
    PyList_Insert(path, 0, newpath);
    Py_DECREF(newpath);
    }

  // Ok, all done, now enter python main.
  return Py_Main(argc, argv);
}
