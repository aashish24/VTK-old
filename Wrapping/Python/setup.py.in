#!/usr/bin/env python

"""
setup.py for installing the VTK-Python bindings using distutils.

Created by Prabhu Ramachandran, June 2002.

"""

import glob
import sys
import string
import os
import os.path
from types import StringType
from distutils.core import setup
from distutils.command.install_data import install_data
from distutils.sysconfig import get_config_var

# Support for Python Eggs:
#  http://peak.telecommunity.com/DevCenter/PythonEggs
#  http://peak.telecommunity.com/DevCenter/EasyInstall
has_setup_tools = 0
# Uncomment the following two lines if you need to build an Egg.
# This is commented out by default since the install rule seems
# broken for setuptools-0.5a13.
#from setuptools import setup
#has_setup_tools = 1


version = "${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}.${VTK_BUILD_VERSION}"

build_lib_dir = "${LIBRARY_OUTPUT_PATH}"

build_bin_dir = "${EXECUTABLE_OUTPUT_PATH}"

# The build type ('Release', 'Debug' etc.).  This may also be
# overridden on the command line by something like
# 'BUILD_TYPE=Release'.  For example::
#   python setup.py install --prefix=D:\\Python23 BUILD_TYPE=Release
build_type = "${CMAKE_BUILD_TYPE}"


def get_libs():
    """Returns a list of libraries to be installed.  """
    libs = []
    if os.name == 'posix':
        pth = os.path.join(build_lib_dir,
                           'libvtk*Python' + get_config_var('SO'))
        libs = glob.glob(os.path.abspath(pth))
    else:
        d = os.path.join(build_bin_dir.replace('/', '\\'), build_type)
        libs = glob.glob(os.path.join(d, 'vtk*Python.dll'))

    return libs


def get_scripts():
    """Returns the appropriate vtkpython executable and pvtkpython
    that is to be installed."""
    scripts = []
    if os.name == 'posix':
        for i in ('vtkpython', 'pvtkpython'):
            f = os.path.join(build_bin_dir, i)
            if os.path.exists(f):
                scripts.append(f)
    else:
        # Under win32 the binary is inside a sub-directory.
        win32_bin_dir = os.path.normpath(os.path.join(build_bin_dir,
                                                      build_type))
        for i in ('vtkpython.exe', 'pvtkpython.exe'):
            f = os.path.join(win32_bin_dir, i)
            if os.path.exists(f):
                scripts.append(f)
    return scripts


class my_install_data (install_data):
    def finalize_options (self):
        """Needed to make this thing work properly."""
        self.set_undefined_options ('install',
                                    ('install_lib', 'install_dir'),
                                    ('root', 'root'),
                                    ('force', 'force'),
                                    )

if __name__ == '__main__':
    # Get the optional build type argument.
    for x in sys.argv[:]:
        if 'BUILD_TYPE' in x:
            build_type = string.strip(string.split(x, '=')[1])
            sys.argv.remove(x)
            break

    def mk_dict(**kw):
        # Unnecessary in recent Pythons but handy for earlier
        # versions.
        return kw

    # The options for setup.
    opts = mk_dict(name              = "VTK",
                   version           = version,
                   description       = "The Visualization Toolkit",
                   maintainer        = "VTK Developers",
                   maintainer_email  = "vtk-developers@vtk.org",
                   license           = "BSD",
                   long_description  = "A high level visualization library",
                   url               = "http://www.vtk.org/",
                   platforms         = ['Any'],
                   cmdclass          = {'install_data': my_install_data},
                   packages          = ['vtk', 'vtk.gtk', 'vtk.qt', 'vtk.tk',
                                        'vtk.util', 'vtk.wx', 'vtk.test'],
                   #scripts           = get_scripts(),
                   data_files        = [('vtk', get_libs())]
                   )
    # If setup_tools is available, then add an extra option to disable
    # creation of a ZIP file.
    if has_setup_tools:
        opts['zip_safe'] = 0

    setup(**opts)
