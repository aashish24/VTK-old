SOURCE_FILES ( Hybrid_SRCS
vtk3DSImporter.cxx
vtk3DWidget.cxx
vtkAmoebaMinimizer.cxx
vtkArcPlotter.cxx
vtkBoxWidget.cxx
vtkCaptionActor2D.cxx
vtkCubeAxesActor2D.cxx
vtkDepthSortPolyData.cxx
vtkEarthSource.cxx
vtkGridTransform.cxx
vtkImplicitModeller.cxx
vtkImageToPolyDataFilter.cxx
vtkImagePlaneWidget.cxx
vtkIterativeClosestPointTransform.cxx
vtkLandmarkTransform.cxx
vtkLegendBoxActor.cxx
vtkLineWidget.cxx
vtkPCAAnalysisFilter.cxx
vtkPlaneWidget.cxx
vtkPolyDataSourceWidget.cxx
vtkPolyDataToImageStencil.cxx
vtkProcrustesAlignmentFilter.cxx
vtkRenderLargeImage.cxx
vtkRIBExporter.cxx
vtkRIBLight.cxx
vtkRIBProperty.cxx
vtkSphereWidget.cxx
vtkThinPlateSplineTransform.cxx
vtkTransformToGrid.cxx
vtkVectorText.cxx
vtkVideoSource.cxx
vtkVRMLImporter.cxx
vtkXYPlotActor.cxx
vtkWeightedTransformFilter.cxx
)

ABSTRACT_FILES(
vtk3DWidget
vtkPolyDataSourceWidget
)

IF (WIN32)
  IF (VTK_USE_VIDEO_FOR_WINDOWS)
    SOURCE_FILES (Hybrid_SRCS vtkWin32VideoSource.cxx)
  ENDIF (VTK_USE_VIDEO_FOR_WINDOWS)

  IF (VTK_USE_MATROX_IMAGING)
    SOURCE_FILES (Hybrid_SRCS vtkMILVideoSource.cxx)
    INCLUDE_DIRECTORIES (${MIL_INCLUDE_PATH})
  ENDIF (VTK_USE_MATROX_IMAGING)
ENDIF (WIN32)

WRAP_EXCLUDE_FILES(vtkVRML)

INCLUDE (${CMAKE_ROOT}/Modules/FindOpenGL.cmake)

IF(VTK_MAKE_INSTANTIATOR)
  # Setup vtkInstantiator registration for this library's classes.
  VTK_MAKE_INSTANTIATOR(vtkHybridInstantiator HybridInstantiator_SRCS
                        Hybrid_SRCS
                        EXPORT_MACRO VTK_HYBRID_EXPORT
                        HEADER_LOCATION ${VTK_BINARY_DIR})
  ADD_LIBRARY(vtkHybrid Hybrid_SRCS HybridInstantiator_SRCS)
  INSTALL_FILES(/include/vtk .h ${VTK_BINARY_DIR}/vtkHybridInstantiator)
ELSE(VTK_MAKE_INSTANTIATOR)
  ADD_LIBRARY(vtkHybrid Hybrid_SRCS)
ENDIF(VTK_MAKE_INSTANTIATOR)

# Allow the user to customize their build with some local options
#
INCLUDE (${VTK_BINARY_DIR}/Hybrid/LocalUserOptions.cmake OPTIONAL)
INCLUDE (${VTK_SOURCE_DIR}/Hybrid/LocalUserOptions.cmake OPTIONAL)

IF (VTK_WRAP_TCL)
  VTK_WRAP_TCL(vtkHybridTCL HybridTCL_SRCS Hybrid_SRCS)
  IF (APPLE)
    ADD_LIBRARY(vtkHybridTCL SHARED HybridTCL_SRCS)
  ELSE (APPLE)
    ADD_LIBRARY(vtkHybridTCL HybridTCL_SRCS)
  ENDIF (APPLE)
  TARGET_LINK_LIBRARIES (vtkHybridTCL
                         vtkRenderingTCL
                         vtkIOTCL
                         vtkGraphicsTCL
                         vtkImagingTCL
                         vtkFilteringTCL
                         vtkCommonTCL
                         ${TCL_LIBRARY})
  IF (WIN32)
    IF (VTK_USE_VIDEO_FOR_WINDOWS)
      TARGET_LINK_LIBRARIES (vtkHybridTCL vfw32)
    ENDIF (VTK_USE_VIDEO_FOR_WINDOWS)
    IF (VTK_USE_MATROX_IMAGING)
      TARGET_LINK_LIBRARIES (vtkHybridTCL ${MIL_LIBRARY})
    ENDIF (VTK_USE_MATROX_IMAGING)
  ENDIF (WIN32)

  INSTALL_TARGETS(/lib/vtk vtkHybridTCL)
ENDIF (VTK_WRAP_TCL)

# if we are wrapping into Python then add the library and extra
# source files
#
IF (VTK_WRAP_PYTHON)
  VTK_WRAP_PYTHON(vtkHybridPython HybridPython_SRCS Hybrid_SRCS)
  IF (APPLE)
    ADD_LIBRARY(vtkHybridPython MODULE HybridPython_SRCS)
  ELSE (APPLE)
    ADD_LIBRARY(vtkHybridPython SHARED HybridPython_SRCS)
    TARGET_LINK_LIBRARIES (vtkHybridPython
                           vtkRenderingPython
                           vtkIOPython
                           vtkGraphicsPython
                           vtkImagingPython
                           vtkFilteringPython
                           vtkCommonPython)
  ENDIF (APPLE)
  TARGET_LINK_LIBRARIES (vtkHybridPython
			 ${OPENGL_LIBRARY})
  IF(WIN32)
    TARGET_LINK_LIBRARIES (vtkHybridPython
                           debug ${PYTHON_DEBUG_LIBRARY}
                           optimized ${PYTHON_LIBRARY})
  ELSE(WIN32)
    TARGET_LINK_LIBRARIES (vtkHybridPython ${PYTHON_LIBRARY})
  ENDIF(WIN32)
  IF (WIN32)
    IF (VTK_USE_VIDEO_FOR_WINDOWS)
      TARGET_LINK_LIBRARIES (vtkHybridPython vfw32)
    ENDIF (VTK_USE_VIDEO_FOR_WINDOWS)
    IF (VTK_USE_MATROX_IMAGING)
      TARGET_LINK_LIBRARIES (vtkHybridPython ${MIL_LIBRARY})
    ENDIF (VTK_USE_MATROX_IMAGING)
  ENDIF (WIN32)

  INSTALL_TARGETS(/lib/vtk vtkHybridPython)
ENDIF (VTK_WRAP_PYTHON)

IF (VTK_WRAP_JAVA)
  VTK_WRAP_JAVA(vtkHybridJava HybridJava_SRCS Hybrid_SRCS)
  ADD_LIBRARY(vtkHybridJava SHARED HybridJava_SRCS)
  TARGET_LINK_LIBRARIES (vtkHybridJava
                         vtkCommonJava
                         vtkFilteringJava
                         vtkImagingJava
                         vtkGraphicsJava
                         vtkRenderingJava
                         vtkIOJava
			 ${OPENGL_LIBRARY})
  IF (WIN32)
    IF (VTK_USE_VIDEO_FOR_WINDOWS)
      TARGET_LINK_LIBRARIES (vtkHybridJava vfw32)
    ENDIF (VTK_USE_VIDEO_FOR_WINDOWS)
    IF (VTK_USE_MATROX_IMAGING)
      TARGET_LINK_LIBRARIES (vtkHybridJava ${MIL_LIBRARY})
    ENDIF (VTK_USE_MATROX_IMAGING)
  ENDIF (WIN32)

  INSTALL_TARGETS(/lib/vtk vtkHybridJava)
ENDIF (VTK_WRAP_JAVA)

LINK_LIBRARIES (
vtkCommon
vtkFiltering
vtkImaging
vtkGraphics
vtkIO
vtkRendering
vtkHybrid
)

IF (WIN32)
  IF (VTK_USE_VIDEO_FOR_WINDOWS)
    LINK_LIBRARIES (vfw32)
  ENDIF (VTK_USE_VIDEO_FOR_WINDOWS)
  IF (VTK_USE_MATROX_IMAGING)
    LINK_LIBRARIES (${MIL_LIBRARY})
  ENDIF (VTK_USE_MATROX_IMAGING)
ENDIF (WIN32)

INSTALL_TARGETS(/lib/vtk vtkHybrid)
INSTALL_FILES(/include/vtk .h Hybrid_SRCS)
