#-----------------------------------------------------------------------------
#
# VTKConfig.cmake - VTK CMake configuration file for external projects.
#
# The following variables are defined to help external projects use VTK:
#
# VTK_VERSION_MAJOR   - The VTK major version number.
# VTK_VERSION_MINOR   - The VTK minor version number (odd for non-release).
# VTK_VERSION_PATCH   - The VTK patch level ("development" for non-release).
#
# VTK_USE_FILE        - A CMake source file that can be included
#                       to set the include directories, library
#                       directories, and preprocessor macros.
#
# VTK_INCLUDE_DIRS    - Include directories for VTK headers.
# VTK_LIBRARY_DIRS    - Link directories for VTK libraries.
# VTK_DEFINITIONS     - Preprocessor macros needed for including VTK headers.
#
# VTK_TCL_EXE         - Location of Tcl wrapper executable (vtk).
# VTK_PYTHON_EXE      - Location of Python wrapper executable (vtkpython).
# VTK_JAVA_HOME       - Location of Java wrapper class directory.
# VTK_PARSE_JAVA_EXE  - Location of vtkParseJava executable.
# VTK_WRAP_JAVA_EXE   - Location of vtkWrapJava executable.
# VTK_WRAP_PYTHON_EXE - Location of vtkWrapPython executable.
# VTK_WRAP_TCL_EXE    - Location of vtkWrapTcl executable.
#
# There are many configuration settings controlling how VTK is built.
# These settings are available through the following settings:
#
# VTK_BUILD_SHARED          - VTK libraries built as shared libraries.
# VTK_DEBUG_LEAKS           - Debug-leaks support.
# VTK_DISABLE_TK_INIT       - Don't initialize Tk from vtkRenderingTCL.
# VTK_HAVE_VG500            - Support for VolumeProVG500 in vtkRendering.
# VTK_HAVE_VP1000           - Support for VolumeProVP1000 in vtkRendering.
# VTK_MANGLE_MESA           - Mangled-MESA support.
# VTK_OPENGL_HAS_OSMESA     - Off-screen rendering support from OpenGL.
# VTK_USE_64BIT_IDS         - vtkIdType is a 64-bit integer type.
# VTK_USE_ANSI_STDLIB       - ANSI-style streams.
# VTK_USE_CARBON            - Carbon support on Macintosh.
# VTK_USE_COCOA             - Cocoa support on Macintosh.
# VTK_USE_HYBRID            - Build vtkHybrid kit.
# VTK_USE_MATROX_IMAGING    - Matrox imaging video support in vtkHybrid.
# VTK_USE_MPI               - MPI support compiled in vtkParallel.
# VTK_USE_PARALLEL          - Build vtkParallel kit.
# VTK_USE_PATENTED          - Build vtkPatented kit.
# VTK_USE_RENDERING         - Build vtkRendering kit.
# VTK_USE_VIDEO_FOR_WINDOWS - Video for windows support in vtkHybrid.
# VTK_USE_VOLUMEPRO         - VolumePro support compiled in vtkRendering.
# VTK_USE_X                 - X window support compiled in vtkRendering.
# VTK_WRAP_JAVA             - Java wrapping.
# VTK_WRAP_PYTHON           - Python wrapping.
# VTK_WRAP_TCL              - Tcl wrapping.
#
# VTK_BUILD_TYPE               - The choice of Debug/Release/... used for VTK.
# VTK_C_COMPILER               - C compiler used to build VTK.
# VTK_C_FLAGS                  - C compiler flags used to build VTK.
# VTK_C_FLAGS_DEBUG            - C flags used for DEBUG build type.
# VTK_C_FLAGS_RELEASE          - C flags used for RELEASE build type.
# VTK_C_FLAGS_MINSIZEREL       - C flags used for MINSIZEREL build type.
# VTK_C_FLAGS_RELWITHDEBINFO   - C flags used for RELWITHDEBINFO build type.
# VTK_CXX_COMPILER             - C++ compiler used to build VTK.
# VTK_CXX_FLAGS                - C++ compiler flags used to build VTK.
# VTK_CXX_FLAGS_DEBUG          - C++ flags used for DEBUG build type.
# VTK_CXX_FLAGS_RELEASE        - C++ flags used for RELEASE build type.
# VTK_CXX_FLAGS_MINSIZEREL     - C++ flags used for MINSIZEREL build type.
# VTK_CXX_FLAGS_RELWITHDEBINFO - C++ flags used for RELWITHDEBINFO build type.
#
# Since VTK is written in C++, the same compiler and settings that
# were used to build VTK should be used to build the external project.
# The following variables are set if the current C++ compiler settings
# differ from those used to build VTK.  The project including this
# file should complain if either of these variables are set, as it is
# unlikely that the build will succeed:
#
# VTK_BUILD_TYPE_MISMATCH   - True if CMAKE_BUILD_TYPE does not match VTK's.
# VTK_CXX_COMPILER_MISMATCH - True if CMAKE_CXX_COMPILER does not match VTK's.
#
# Only the variables listed above should be used by a third-party
# project.  Others may be removed or replaced in the future.
#
# This file can be included by a project using VTK like this:
#
# INCLUDE(${VTK_DIR}/VTKConfig.cmake)
#
# Then, in order to use VTK classes, use these lines:
#
# INCLUDE_DIRECTORIES(${VTK_INCLUDE_DIRS})
# LINK_DIRECTORIES(${VTK_LIBRARY_DIRS})
# ADD_DEFINITIONS(${VTK_DEFINITIONS})
#
# To link an executable that uses a VTK kit, use
#
# TARGET_LINK_LIBRARIES(MyExecutable <kit>)
#
# The supported kits/libraries are:
#
#   vtkCommon
#   vtkFiltering
#   vtkGraphics
#   vtkImaging
#   vtkIO
#   vtkRendering - Available if VTK_USE_RENDERING is on.
#   vtkHybrid    - Available if VTK_USE_HYBRID is on.
#   vtkParallel  - Available if VTK_USE_PARALLEL is on.
#   vtkPatented  - Available if VTK_USE_PATENTED is on.
#
# If VTK_WRAP_TCL is on, these are the corresponding Tcl libraries:
#   
#   vtkCommonTCL
#   vtkFilteringTCL
#   vtkGraphicsTCL
#   vtkImagingTCL
#   vtkIOTCL
#   vtkRenderingTCL - Available if VTK_USE_RENDERING is on.
#   vtkHybridTCL    - Available if VTK_USE_HYBRID is on.
#   vtkParallelTCL  - Available if VTK_USE_PARALLEL is on.
#   vtkPatentedTCL  - Available if VTK_USE_PATENTED is on.
#
# If VTK_WRAP_PYTHON is on, these are the corresponding Python libraries:
#   
#   vtkCommonPython
#   vtkFilteringPython
#   vtkGraphicsPython
#   vtkImagingPython
#   vtkIOPython
#   vtkRenderingPython - Available if VTK_USE_RENDERING is on.
#   vtkHybridPython    - Available if VTK_USE_HYBRID is on.
#   vtkParallelPython  - Available if VTK_USE_PARALLEL is on.
#   vtkPatentedPython  - Available if VTK_USE_PATENTED is on.
#
# If VTK_WRAP_JAVA is on, these are the corresponding Java libraries:
#   
#   vtkCommonJava
#   vtkFilteringJava
#   vtkGraphicsJava
#   vtkImagingJava
#   vtkIOJava
#   vtkRenderingJava - Available if VTK_USE_RENDERING is on.
#   vtkHybridJava    - Available if VTK_USE_HYBRID is on.
#   vtkParallelJava  - Available if VTK_USE_PARALLEL is on.
#   vtkPatentedJava  - Available if VTK_USE_PATENTED is on.
#
# While others are shown below, they should not be used directly
# by applications.
#-----------------------------------------------------------------------------

# The VTK include file directories.
SET(VTK_INCLUDE_DIRS "@VTK_INCLUDE_DIRS@")

# The VTK library directories.
SET(VTK_LIBRARY_DIRS "@VTK_LIBRARY_DIRS@")

# The command-line preprocessor definitions used to build VTK.
SET(VTK_DEFINITIONS "@VTK_DEFINITIONS@")

# The VTK version number
SET(VTK_VERSION_MAJOR "@VTK_VERSION_MAJOR@")
SET(VTK_VERSION_MINOR "@VTK_VERSION_MINOR@")
SET(VTK_VERSION_PATCH "@VTK_VERSION_PATCH@")

# The location of the UseVTK.cmake file.
SET(VTK_USE_FILE "@VTK_USE_FILE@")

# The C compiler used to build VTK.
SET(VTK_C_COMPILER "@CMAKE_C_COMPILER@")

# The C compiler flags used to build VTK.
SET(VTK_C_FLAGS "@CMAKE_C_FLAGS@")
SET(VTK_C_FLAGS_DEBUG "@CMAKE_C_FLAGS_DEBUG@")
SET(VTK_C_FLAGS_RELEASE "@CMAKE_C_FLAGS_RELEASE@")
SET(VTK_C_FLAGS_MINSIZEREL "@CMAKE_C_FLAGS_MINSIZEREL@")
SET(VTK_C_FLAGS_RELWITHDEBINFO "@CMAKE_C_FLAGS_RELWITHDEBINFO@")

# The C++ compiler used to build VTK.
SET(VTK_CXX_COMPILER "@CMAKE_CXX_COMPILER@")

# The C++ compiler flags used to build VTK.
SET(VTK_CXX_FLAGS "@CMAKE_CXX_FLAGS@")
SET(VTK_CXX_FLAGS_DEBUG "@CMAKE_CXX_FLAGS_DEBUG@")
SET(VTK_CXX_FLAGS_RELEASE "@CMAKE_CXX_FLAGS_RELEASE@")
SET(VTK_CXX_FLAGS_MINSIZEREL "@CMAKE_CXX_FLAGS_MINSIZEREL@")
SET(VTK_CXX_FLAGS_RELWITHDEBINFO "@CMAKE_CXX_FLAGS_RELWITHDEBINFO@")

# The CMAKE_BUILD_TYPE setting used to build VTK.
SET(VTK_BUILD_TYPE "@CMAKE_BUILD_TYPE@")

# VTK Configuration options.
SET(VTK_BUILD_SHARED "@BUILD_SHARED_LIBS@")
SET(VTK_DEBUG_LEAKS "@VTK_DEBUG_LEAKS@")
SET(VTK_DISABLE_TK_INIT "@VTK_DISABLE_TK_INIT@")
SET(VTK_HAVE_VG500 "@VTK_HAVE_VG500@")
SET(VTK_HAVE_VP1000 "@VTK_HAVE_VP1000@")
SET(VTK_MANGLE_MESA "@VTK_MANGLE_MESA@")
SET(VTK_OPENGL_HAS_OSMESA "@VTK_OPENGL_HAS_OSMESA@")
SET(VTK_USE_64BIT_IDS "@VTK_USE_64BIT_IDS@")
SET(VTK_USE_ANSI_STDLIB "@VTK_USE_ANSI_STDLIB@")
SET(VTK_USE_CARBON "@VTK_USE_CARBON@")
SET(VTK_USE_COCOA "@VTK_USE_COCOA@")
SET(VTK_USE_HYBRID "@VTK_USE_HYBRID@")
SET(VTK_USE_MATROX_IMAGING "@VTK_USE_MATROX_IMAGING@")
SET(VTK_USE_MPI "@VTK_USE_MPI@")
SET(VTK_USE_PARALLEL "@VTK_USE_PARALLEL@")
SET(VTK_USE_PATENTED "@VTK_USE_PATENTED@")
SET(VTK_USE_RENDERING "@VTK_USE_RENDERING@")
SET(VTK_USE_VIDEO_FOR_WINDOWS "@VTK_USE_VIDEO_FOR_WINDOWS@")
SET(VTK_USE_VOLUMEPRO "@VTK_USE_VOLUMEPRO@")
SET(VTK_USE_X "@VTK_USE_X@")
SET(VTK_WRAP_JAVA "@VTK_WRAP_JAVA@")
SET(VTK_WRAP_PYTHON "@VTK_WRAP_PYTHON@")
SET(VTK_WRAP_TCL "@VTK_WRAP_TCL@")

# The VTK executable locations.
SET(VTK_TCL_EXE "@VTK_TCL_EXE_CONFIG@")
SET(VTK_PYTHON_EXE "@VTK_PYTHON_EXE_CONFIG@")
SET(VTK_JAVA_HOME "@VTK_JAVA_HOME_CONFIG@")
SET(VTK_PARSE_JAVA_EXE "@VTK_PARSE_JAVA_EXE_CONFIG@")
SET(VTK_WRAP_JAVA_EXE "@VTK_WRAP_JAVA_EXE_CONFIG@")
SET(VTK_WRAP_PYTHON_EXE "@VTK_WRAP_PYTHON_EXE_CONFIG@")
SET(VTK_WRAP_TCL_EXE "@VTK_WRAP_TCL_EXE_CONFIG@")

# The list of library dependencies used by CMake for automatic
# chainging of dependent libraries.
SET(vtkCommon_LIB_DEPENDS "@vtkCommon_LIB_DEPENDS@")
SET(vtkFiltering_LIB_DEPENDS "@vtkFiltering_LIB_DEPENDS@")
SET(vtkGraphics_LIB_DEPENDS "@vtkGraphics_LIB_DEPENDS@")
SET(vtkImaging_LIB_DEPENDS "@vtkImaging_LIB_DEPENDS@")
SET(vtkIO_LIB_DEPENDS "@vtkIO_LIB_DEPENDS@")
SET(vtkRendering_LIB_DEPENDS "@vtkRendering_LIB_DEPENDS@")
SET(vtkHybrid_LIB_DEPENDS "@vtkHybrid_LIB_DEPENDS@")
SET(vtkParallel_LIB_DEPENDS "@vtkParallel_LIB_DEPENDS@")
SET(vtkPatented_LIB_DEPENDS "@vtkPatented_LIB_DEPENDS@")

SET(vtkCommonTCL_LIB_DEPENDS "@vtkCommonTCL_LIB_DEPENDS@")
SET(vtkFilteringTCL_LIB_DEPENDS "@vtkFilteringTCL_LIB_DEPENDS@")
SET(vtkGraphicsTCL_LIB_DEPENDS "@vtkGraphicsTCL_LIB_DEPENDS@")
SET(vtkImagingTCL_LIB_DEPENDS "@vtkImagingTCL_LIB_DEPENDS@")
SET(vtkIOTCL_LIB_DEPENDS "@vtkIOTCL_LIB_DEPENDS@")
SET(vtkRenderingTCL_LIB_DEPENDS "@vtkRenderingTCL_LIB_DEPENDS@")
SET(vtkHybridTCL_LIB_DEPENDS "@vtkHybridTCL_LIB_DEPENDS@")
SET(vtkParallelTCL_LIB_DEPENDS "@vtkParallelTCL_LIB_DEPENDS@")
SET(vtkPatentedTCL_LIB_DEPENDS "@vtkPatentedTCL_LIB_DEPENDS@")

SET(vtkCommonPython_LIB_DEPENDS "@vtkCommonPython_LIB_DEPENDS@")
SET(vtkFilteringPython_LIB_DEPENDS "@vtkFilteringPython_LIB_DEPENDS@")
SET(vtkGraphicsPython_LIB_DEPENDS "@vtkGraphicsPython_LIB_DEPENDS@")
SET(vtkImagingPython_LIB_DEPENDS "@vtkImagingPython_LIB_DEPENDS@")
SET(vtkIOPython_LIB_DEPENDS "@vtkIOPython_LIB_DEPENDS@")
SET(vtkRenderingPython_LIB_DEPENDS "@vtkRenderingPython_LIB_DEPENDS@")
SET(vtkHybridPython_LIB_DEPENDS "@vtkHybridPython_LIB_DEPENDS@")
SET(vtkParallelPython_LIB_DEPENDS "@vtkParallelPython_LIB_DEPENDS@")
SET(vtkPatentedPython_LIB_DEPENDS "@vtkPatentedPython_LIB_DEPENDS@")

SET(vtkCommonJava_LIB_DEPENDS "@vtkCommonJava_LIB_DEPENDS@")
SET(vtkFilteringJava_LIB_DEPENDS "@vtkFilteringJava_LIB_DEPENDS@")
SET(vtkGraphicsJava_LIB_DEPENDS "@vtkGraphicsJava_LIB_DEPENDS@")
SET(vtkImagingJava_LIB_DEPENDS "@vtkImagingJava_LIB_DEPENDS@")
SET(vtkIOJava_LIB_DEPENDS "@vtkIOJava_LIB_DEPENDS@")
SET(vtkRenderingJava_LIB_DEPENDS "@vtkRenderingJava_LIB_DEPENDS@")
SET(vtkHybridJava_LIB_DEPENDS "@vtkHybridJava_LIB_DEPENDS@")
SET(vtkParallelJava_LIB_DEPENDS "@vtkParallelJava_LIB_DEPENDS@")
SET(vtkPatentedJava_LIB_DEPENDS "@vtkPatentedJava_LIB_DEPENDS@")

SET(vtkexpat_LIB_DEPENDS "@vtkexpat_LIB_DEPENDS@")
SET(vtkfreetype_LIB_DEPENDS "@vtkfreetype_LIB_DEPENDS@")
SET(vtkftgl_LIB_DEPENDS "@vtkftgl_LIB_DEPENDS@")
SET(vtkjpeg_LIB_DEPENDS "@vtkjpeg_LIB_DEPENDS@")
SET(vtkpng_LIB_DEPENDS "@vtkpng_LIB_DEPENDS@")
SET(vtktiff_LIB_DEPENDS "@vtktiff_LIB_DEPENDS@")
SET(vtkzlib_LIB_DEPENDS "@vtkzlib_LIB_DEPENDS@")

# Check if the compiler matches the one used to build VTK.
IF(CMAKE_CXX_COMPILER STRLESS VTK_CXX_COMPILER)
  SET(VTK_CXX_COMPILER_MISMATCH 1)
ELSE(CMAKE_CXX_COMPILER STRLESS VTK_CXX_COMPILER)
  IF(CMAKE_CXX_COMPILER STRGREATER VTK_CXX_COMPILER)
    SET(VTK_CXX_COMPILER_MISMATCH 1)
  ENDIF(CMAKE_CXX_COMPILER STRGREATER VTK_CXX_COMPILER)
ENDIF(CMAKE_CXX_COMPILER STRLESS VTK_CXX_COMPILER)

# Check if the build type matches those used to build VTK.
# This comparison is nasty to work around a CMake 1.4 bug that
# segfaults when STRLESS operates with empty input.
IF(CMAKE_BUILD_TYPE)
  IF(VTK_BUILD_TYPE)
    # Both are set, safe to compare.
    IF(CMAKE_BUILD_TYPE STRLESS VTK_BUILD_TYPE)
      SET(VTK_BUILD_TYPE_MISMATCH 1)
    ELSE(CMAKE_BUILD_TYPE STRLESS VTK_BUILD_TYPE)
      IF(CMAKE_BUILD_TYPE STRGREATER VTK_BUILD_TYPE)
        SET(VTK_BUILD_TYPE_MISMATCH 1)
      ENDIF(CMAKE_BUILD_TYPE STRGREATER VTK_BUILD_TYPE)
    ENDIF(CMAKE_BUILD_TYPE STRLESS VTK_BUILD_TYPE)
  ELSE(VTK_BUILD_TYPE)
    # Only one is set, we have a mismatch.
    SET(VTK_BUILD_TYPE_MISMATCH 1)
  ENDIF(VTK_BUILD_TYPE)
ELSE(CMAKE_BUILD_TYPE)
  IF(VTK_BUILD_TYPE)
    # Only one is set, we have a mismatch.
    SET(VTK_BUILD_TYPE_MISMATCH 1)
  ENDIF(VTK_BUILD_TYPE)
ENDIF(CMAKE_BUILD_TYPE)
